/**
 * @author ZENGXING, Benjamin, MAMINGYANG
 * Generated by script
 */

package com.shoppingcart.springboot.model;

import com.fasterxml.jackson.annotation.JsonIgnore;
import jakarta.persistence.*;

import jakarta.validation.constraints.NotNull;
import jakarta.validation.constraints.PositiveOrZero;
import lombok.Getter;
import lombok.Setter;

import java.util.List;

import jakarta.validation.constraints.*;
import java.util.*;


@Entity
@Getter
@Setter
public class Product {

  @Id
  @GeneratedValue(strategy = GenerationType.IDENTITY)
  private Long productId;

  @NotNull(message = "Product name cannot be null.")
  @Size(min = 2, max = 100, message = "Product name must be between 2 and 50 characters.")
  @Column(nullable = false)
  private String name;

  @NotNull(message = "Category cannot be null.")
  @Size(max = 100, message = "Category can have a maximum of 100 characters.")
  @Column(nullable = false)
  private String category;

  @Lob
  @Size(max = 1000000, message = "Description can have a maximum of 1,000,000 characters.")
  private String description;

  @NotNull(message = "Price cannot be null.")
  @PositiveOrZero(message = "Price cannot be negative.")
  @Column(nullable = false)
  private Double price;  // Max is determined by Double.MAX_VALUE

  @PositiveOrZero(message = "Discount cannot be negative.")
  @Max(value = 100, message = "Discount cannot exceed 100%.")
  private Double discount = 0.0;

  @NotNull(message = "Store quantity cannot be null.")
  @Max(value = 100000, message = "Store quantity cannot exceed 100,000.")
  @PositiveOrZero(message = "Quantity cannot be negative.")
  @Column(nullable = false)
  private Integer storeQuantity;

  @NotNull(message = "Image URL cannot be null.")
  @Size(max = 1000, message = "Image URL can have a maximum of 1,000 characters.")
  private String imageUrl;

  @Size(max = 1000, message = "Tags can have a maximum of 1,000 characters.")
  private String tags;

  private Integer viewCount = 0;

  @NotNull(message = "Visibility status is required.")
  @Column(nullable = false)
  private Boolean isVisible = true;

  // Relationships with other entities
  @JsonIgnore
  @OneToMany(mappedBy = "product", cascade = CascadeType.ALL, orphanRemoval = true)
  private List<OrderDetail> orderDetails;

  @JsonIgnore
  @OneToMany(mappedBy = "product")
  private List<ShoppingCartProduct> shoppingCartProducts;

  @JsonIgnore
  @OneToMany(mappedBy = "product", cascade = CascadeType.ALL, orphanRemoval = true)
  private List<Review> reviews;

  // Default constructor
  public Product() {
  }

  // Parameterized constructor
  public Product(String name, String category, String description, Double price, Double discount, Integer storeQuantity,
                 String imageUrl, String tags, Integer viewCount, Boolean isVisible, List<OrderDetail> orderDetails,
                 List<ShoppingCartProduct> shoppingCartProducts, List<Review> reviews) {
    this.name = name;
    this.category = category;
    this.description = description;
    this.price = price;
    this.discount = discount;
    this.storeQuantity = storeQuantity;
    this.imageUrl = imageUrl;
    this.tags = tags;
    this.viewCount = viewCount;
    this.isVisible = isVisible;
    this.orderDetails = orderDetails;
    this.shoppingCartProducts = shoppingCartProducts;
    this.reviews = reviews;
  }

  public Long getProductId() {
    return productId;
  }

  public void setProductId(Long productId) {
    this.productId = productId;
  }

  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public String getCategory() {
    return category;
  }

  public void setCategory(String category) {
    this.category = category;
  }

  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }

  public Double getPrice() {
    return price;
  }

  public void setPrice(Double price) {
    this.price = price;
  }

  public Double getDiscount() {
    return discount;
  }

  public void setDiscount(Double discount) {
    this.discount = discount;
  }

  public Integer getStoreQuantity() {
    return storeQuantity;
  }

  public void setStoreQuantity(Integer storeQuantity) {
    this.storeQuantity = storeQuantity;
  }

  public String getImageUrl() {
    return imageUrl;
  }

  public void setImageUrl(String imageUrl) {
    this.imageUrl = imageUrl;
  }

  public String getTags() {
    return tags;
  }

  public void setTags(String tags) {
    this.tags = tags;
  }

  public Integer getViewCount() {
    return viewCount;
  }

  public void setViewCount(Integer viewCount) {
    this.viewCount = viewCount;
  }

  public Boolean getIsVisible() {
    return isVisible;
  }

  public void setIsVisible(Boolean isVisible) {
    this.isVisible = isVisible;
  }

  public List<OrderDetail> getOrderDetails() {
    return orderDetails;
  }

  public void setOrderDetails(List<OrderDetail> orderDetails) {
    this.orderDetails = orderDetails;
  }

  public List<ShoppingCartProduct> getShoppingCartProducts() {
    return shoppingCartProducts;
  }

  public void setShoppingCartProducts(List<ShoppingCartProduct> shoppingCartProducts) {
    this.shoppingCartProducts = shoppingCartProducts;
  }

  public void incrementViewCount() {
    this.viewCount++;
  }

  public List<Review> getReviews() {
    return reviews;
  }

  public void setReviews(List<Review> reviews) {
    this.reviews = reviews;
  }
}
