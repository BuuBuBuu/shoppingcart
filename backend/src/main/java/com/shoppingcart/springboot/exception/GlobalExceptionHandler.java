/**
 * @author ZENGXING
 * Generated by script
 */

package com.shoppingcart.springboot.exception; // Package declaration

import org.springframework.http.*; // Importing Spring HTTP classes
import org.springframework.ui.Model;
import org.springframework.web.bind.MethodArgumentNotValidException; // Importing exception for method argument validation
import org.springframework.web.bind.annotation.*; // Importing Spring Web annotations
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import java.util.*; // Importing Java utility classes

@RestControllerAdvice // Marks this class as a global exception handler
public class GlobalExceptionHandler {

    // Handle validation errors
    @ExceptionHandler(MethodArgumentNotValidException.class) // Specifies the exception to handle
    public ResponseEntity<Map<String, String>> handleValidationExceptions(
            MethodArgumentNotValidException ex) {

        Map<String, String> errors = new HashMap<>(); // Create a map to store field errors
        ex.getBindingResult().getFieldErrors().forEach((error) ->
                errors.put(error.getField(), error.getDefaultMessage()) // Populate the map with field errors
        );
        return new ResponseEntity<>(errors, HttpStatus.BAD_REQUEST); // Return the errors with a 400 Bad Request status
    }

    // Handle custom runtime exceptions (e.g., for resource not found or business logic errors)
    @ExceptionHandler(RuntimeException.class) // Specifies the exception to handle
    public ResponseEntity<String> handleRuntimeException(RuntimeException ex) {
        return new ResponseEntity<>(ex.getMessage(), HttpStatus.NOT_FOUND); // Return the exception message with a 404 Not Found status
    }

    // Handle all other exceptions globally
    @ExceptionHandler(Exception.class)
    public String handleGlobalException(Exception e, Model model, RedirectAttributes redirectAttributes) {
        // Log the exception details (for debugging purposes)
        e.printStackTrace();

        // Add error message to the model
        model.addAttribute("error", "There was an error processing your request.");

        // Optionally, add more details if necessary for flash attributes (to persist through redirects)
        redirectAttributes.addFlashAttribute("errorMessage", e.getMessage());

        // Redirect to a custom error page
        return "redirect:/error";  // Ensure error.html exists in your templates folder
    }
}
