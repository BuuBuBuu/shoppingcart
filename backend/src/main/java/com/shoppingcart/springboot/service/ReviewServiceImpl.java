/**
 * @author Poe Ei Ei Phyu
 * Generated by script
 */

package com.shoppingcart.springboot.service;


import com.shoppingcart.springboot.model.Customer;
import com.shoppingcart.springboot.model.Product;
import com.shoppingcart.springboot.model.Review;
import com.shoppingcart.springboot.repository.CustomerRepository;
import com.shoppingcart.springboot.repository.ProductRepository;
import com.shoppingcart.springboot.repository.ReviewRepository;
import jakarta.transaction.Transactional;

import com.shoppingcart.springboot.model.Review;
import com.shoppingcart.springboot.repository.ReviewRepository;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import jakarta.transaction.Transactional;

import java.util.List;

import java.util.List;

@Service
@Transactional
public class ReviewServiceImpl implements ReviewService {
    @Autowired
    private ProductRepository productRepository;

    @Autowired
    private CustomerRepository customerRepository;

    @Autowired
    private ReviewRepository reviewRepository;

    @Override
    public Review getReview(Long id) {

        return reviewRepository.findById(id).orElse(null);
    }

    @Override
    public List<Review> getAllReviews() {

        return reviewRepository.findAll();
    }

    @Override
    public void addReview(Long productId, Long customerId, Review review) {
        Product product = productRepository.findById(productId).orElse(null);
        Customer customer = customerRepository.findById(customerId).orElse(null);

        review.setProduct(product);
        review.setCustomer(customer);
        reviewRepository.save(review);
    }

    @Override
    public void updateReview(Long id, Review updatedReview) {
        Review review = reviewRepository.findById(id).orElse(null);
        review.setComment(updatedReview.getComment());
        review.setRating(updatedReview.getRating());
        reviewRepository.save(review);
    }

    @Override
    public void deleteReview(Long id) {

        reviewRepository.deleteById(id);
    }


    @Override
    public Review addReview(Review review) {
        return reviewRepository.save(review);
    }

    @Override
    public List<Review> getReviewsByProductId(Long productId) {
        return reviewRepository.findByProductProductId(productId);
    }

    @Override
    public List<Review> getReviewsByCustomerId(Long customerId) {
        return reviewRepository.findByCustomerCustomerId(customerId);
    }

    @Override
    public double calculateAverageRating(Long productId) {
        List<Review> reviews = reviewRepository.findByProductProductId(productId);

        // Calculate the average rating
        double totalRating = 0;
        for (Review review : reviews) {
            totalRating += review.getRating();
        }
        return reviews.isEmpty() ? 0 : totalRating / reviews.size();
    }

}
