/**
 * @author DUGUANYU
 * Generated by script
 */

package com.shoppingcart.springboot.service;


import com.shoppingcart.springboot.model.Order;
import com.shoppingcart.springboot.model.OrderDetail;
import com.shoppingcart.springboot.model.ShoppingCart;
import com.shoppingcart.springboot.model.ShoppingCartProduct;
import com.shoppingcart.springboot.repository.OrderDetailRepository;
import com.shoppingcart.springboot.repository.OrderRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

@Service
@Transactional
public class OrderServiceImpl implements OrderService {

    @Autowired
    private OrderRepository orderRepository;

    @Autowired
    private OrderDetailRepository orderDetailRepository;

    @Override
    public Order createOrder(Order order) {
        return orderRepository.save(order);
    }

    @Override
    public Order getOrderById(Long orderId) {
        return orderRepository.findById(orderId)
            .orElseThrow(() -> new RuntimeException("Order not found with id: " + orderId));
    }

    @Override
    public List<Order> getOrdersByCustomerId(Long customerId) {
        return orderRepository.findByCustomer_CustomerId(customerId);
    }

    @Override
    public Order updateOrderStatus(Long orderId, String status) {
        Order order = getOrderById(orderId);
        order.setStatus(status);
        return orderRepository.save(order);
    }

    @Override
    public Order createOrderFromCart(ShoppingCart cart) {
        Order order = new Order();
        order.setCustomer(cart.getCustomer());
        order.setOrderDate(new Date());
        order.setStatus("Pending");

        List<OrderDetail> orderDetails = new ArrayList<>();
        double totalPrice = 0.0;

        for (ShoppingCartProduct cartProduct : cart.getShoppingCartProducts()) {
            OrderDetail orderDetail = new OrderDetail();
            orderDetail.setOrder(order);
            orderDetail.setProduct(cartProduct.getProduct());
            orderDetail.setQuantity(cartProduct.getQuantity());
            orderDetails.add(orderDetail);

            // Calculate total price
            totalPrice += cartProduct.getProduct().getPrice() * cartProduct.getQuantity();
        }

        order.setOrderDetails(orderDetails);
        order.setFinalPrice(totalPrice);

        // Save order and order details
        Order savedOrder = orderRepository.save(order);
        orderDetailRepository.saveAll(orderDetails);

        return savedOrder;
    }
}
