/**
 * @author MAMINGYANG
 * Generated by script
 */

package com.shoppingcart.springboot.service;

import com.shoppingcart.springboot.model.Customer;
import com.shoppingcart.springboot.model.ShoppingCart;
import com.shoppingcart.springboot.model.User;
import com.shoppingcart.springboot.repository.CustomerRepository;
import com.shoppingcart.springboot.repository.ShoppingCartRepository;
import com.shoppingcart.springboot.repository.UserRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.mail.MailException;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;

// 添加必要的导入
import org.apache.http.client.methods.CloseableHttpResponse;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.impl.client.CloseableHttpClient;
import org.apache.http.impl.client.HttpClients;
import org.apache.http.util.EntityUtils;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;

import org.springframework.mail.javamail.JavaMailSender;
import org.springframework.mail.SimpleMailMessage;

import java.io.IOException;
import java.time.LocalDateTime;
import java.time.ZoneId;
import java.time.format.DateTimeFormatter;
import java.util.Date;
import java.util.Optional;

@Service
public class UserServiceImpl implements UserService {

    @Autowired
    private UserRepository userRepository;

    @Autowired
    private CustomerRepository customerRepository;

    @Autowired
    private ShoppingCartRepository shoppingCartRepository;

    @Autowired
    private PasswordEncoder passwordEncoder;

    @Autowired
    private JavaMailSender mailSender;

    // Authenticate user by email and password
    @Override
    public User authenticate(String email, String password) {
        Optional<User> optionalUser = userRepository.findByEmail(email);
        if (optionalUser.isPresent()) {
            User user = optionalUser.get();
            // 检查用户是否已验证邮箱
            if (!user.isVerified()) {
                throw new RuntimeException("Your account has not been verified. Please check your email to complete the verification.");
            }
            if (passwordEncoder.matches(password, user.getPassword())) {
                return user;

            } else {
                throw new RuntimeException("Incorrect password.");
            }
        } else {
            throw new RuntimeException("User not found");
        }
    }

    // Register a new user
    @Override
    public boolean registerUser(User user) {
        // 检查邮箱或用户名是否已存在
        Optional<User> existingUserByEmail = userRepository.findByEmail(user.getEmail());
        Optional<User> existingUserByUserName = userRepository.findByUserName(user.getUserName());

        if (existingUserByEmail.isPresent() || existingUserByUserName.isPresent()) {
            throw new RuntimeException("The email address or username has been registered");
        }

//     **在此处添加邮箱验证逻辑**
//    if (!isEmailValid(user.getEmail())) {
//      throw new RuntimeException("The email address provided is invalid, please enter a valid email address。");
//    }


        // 加密用户密码
        user.setPassword(passwordEncoder.encode(user.getPassword()));

        // 设置用户为已验证（因为您不希望用户手动验证）
        user.setVerified(true);

        // 保存用户到数据库
        userRepository.save(user);

        // 为用户创建 Customer 实例并保存
        Customer customer = new Customer();
        customer.setUser(user);
        customerRepository.save(customer);

        // 为 Customer 创建购物车
        ShoppingCart shoppingCart = new ShoppingCart();
        shoppingCart.setCustomer(customer);
        shoppingCartRepository.save(shoppingCart);

        return true;
    }


//  // 添加邮箱验证方法
//  private boolean isEmailValid(String email) {
//    // 使用您的 MailboxLayer API 密钥
//    String apiKey = "8b4e1beb0ec6de90ed5ac37559dc31bf"; // 请替换为您的实际 API Key
////    String url = "http://apilayer.net/api/check?access_key=" + apiKey + "&email=bmonsterzx@gmail.com"+ "&smtp=1&format=1";
//    String url = "https://api.emailable.com/v1/verify?email=" + email + "&api_key=test_9cca03d368c2e1866929";
//
//    try (CloseableHttpClient httpClient = HttpClients.createDefault()) {
//      HttpGet request = new HttpGet(url);
//      CloseableHttpResponse response = httpClient.execute(request);
//
//      String jsonResponse = EntityUtils.toString(response.getEntity());
//      ObjectMapper objectMapper = new ObjectMapper();
//      JsonNode rootNode = objectMapper.readTree(jsonResponse);
//
//      boolean formatValid = rootNode.path("format_valid").asBoolean();
//      boolean mxFound = rootNode.path("mx_found").asBoolean();
//      boolean smtpCheck = rootNode.path("smtp_check").asBoolean();
//
//      // 根据需要调整验证条件
//      return formatValid && mxFound && smtpCheck;
//
//    } catch (Exception e) {
//      e.printStackTrace();
//      // 在发生异常时，选择返回 false 或抛出异常
//      return false;
//    }
//  }


    // 添加邮箱验证方法
    private boolean isEmailValid(String email) {
        // 使用您的 MailboxLayer API 密钥
        String apiKey = "8b4e1beb0ec6de90ed5ac37559dc31bf"; // 请替换为您的实际 API Key
//    String url = "http://apilayer.net/api/check?access_key=" + apiKey + "&email=bmonsterzx@gmail.com"+ "&smtp=1&format=1";
        String url = "https://api.emailable.com/v1/verify?email=" + email + "&api_key=test_9cca03d368c2e1866929";

        try (CloseableHttpClient httpClient = HttpClients.createDefault()) {
            HttpGet request = new HttpGet(url);
            CloseableHttpResponse response = httpClient.execute(request);

            String jsonResponse = EntityUtils.toString(response.getEntity());
            ObjectMapper objectMapper = new ObjectMapper();
            JsonNode rootNode = objectMapper.readTree(jsonResponse);

            boolean formatValid = rootNode.path("format_valid").asBoolean();
            boolean mxFound = rootNode.path("mx_found").asBoolean();
            boolean smtpCheck = rootNode.path("smtp_check").asBoolean();

            // 根据需要调整验证条件
            return formatValid && mxFound && smtpCheck;

        } catch (Exception e) {
            e.printStackTrace();
            // 在发生异常时，选择返回 false 或抛出异常
            return false;
        }
    }

    // Change user's password using email
    @Override
    public boolean changePassword(String email, String oldPassword, String newPassword) {
        Optional<User> optionalUser = userRepository.findByEmail(email);
        if (optionalUser.isPresent()) {
            User user = optionalUser.get();
            // 检查用户是否已验证邮箱
            if (!user.isVerified()) {
                throw new RuntimeException("Your account has not been verified, and you cannot change the password.");
            }
            // 检查旧密码是否匹配
            if (passwordEncoder.matches(oldPassword, user.getPassword())) {
                // 加密新密码并更新用户
                user.setPassword(passwordEncoder.encode(newPassword));
                userRepository.save(user);
                return true;
            } else {
                throw new RuntimeException("The old password is incorrect");
            }
        } else {
            throw new RuntimeException("The user corresponding to the mailbox was not found");
        }
    }


    // Logout user (for demonstration purposes)
    @Override
    public void logout(Long userId) {
        Optional<User> optionalUser = userRepository.findById(userId);
        if (optionalUser.isPresent()) {
            // 在此示例中，不需要做实际的操作
            System.out.println("User with ID " + userId + " has been logged out.");
        } else {
            throw new RuntimeException("User with ID " + userId + " not found");
        }
    }

    // Get user by ID
    @Override
    public User getUserById(Long userId) {
        return userRepository.findById(userId)
                .orElseThrow(() -> new RuntimeException("User with ID " + userId + " not found"));
    }

    // 更新重置密码 Token
    @Override
    public void updateResetPasswordToken(String token, String email) {
        Optional<User> optionalUser = userRepository.findByEmail(email);
        if (optionalUser.isPresent()) {
            User user = optionalUser.get();
            user.setResetPasswordToken(token);
            user.setTokenExpiryDate(LocalDateTime.now().plusMinutes(30)); // Token 30分钟后过期
            userRepository.save(user);
        } else {
            throw new RuntimeException("User with Email " + email + " not found");
        }
    }

    // 根据重置密码 Token 查找用户
    @Override
    public User findByResetPasswordToken(String token) {
        return userRepository.findByResetPasswordToken(token)
                .orElse(null);
    }

    // 检查 Token 是否过期
    @Override
    public boolean isTokenExpired(User user) {
        return user.getTokenExpiryDate().isBefore(LocalDateTime.now());
    }

    // 更新用户密码
    @Override
    public void updatePassword(User user, String newPassword) {
        user.setPassword(passwordEncoder.encode(newPassword));
        user.setResetPasswordToken(null);
        user.setTokenExpiryDate(null);
        userRepository.save(user);
    }

    // 根据邮箱获取用户
    @Override
    public User getUserByEmail(String email) {
        return userRepository.findByEmail(email)
                .orElse(null);
    }

    public void resetPasswordToCurrentDateTime(User user) {

        // 生成新密码为当前日期和时间
        LocalDateTime localDateTime = LocalDateTime.now();
        String newPassword = localDateTime.format(DateTimeFormatter.ofPattern("yyyyMMddHHmmss"));

        // 对新密码进行加密
        String encodedPassword = passwordEncoder.encode(newPassword);

        // 更新用户的密码
        user.setPassword(encodedPassword);

        // 更新最后登录时间
        Date date = Date.from(localDateTime.atZone(ZoneId.systemDefault()).toInstant());
        user.setLastLogin(date);

        // 清除重置密码的 token
        user.setResetPasswordToken(null);

        // 保存用户信息到数据库
        userRepository.save(user);

        // 发送新密码到用户的邮箱
        sendNewPasswordEmail(user.getEmail(), newPassword);
    }

    // *发送新密码邮件的辅助方法*
    private void sendNewPasswordEmail(String toEmail, String newPassword) {
        String subject = "Your new password";
        String message = "Your new password is\n" + newPassword + "\nPlease log in with this password and modify it in time.";

        SimpleMailMessage email = new SimpleMailMessage();
        email.setTo(toEmail);
        email.setSubject(subject);
        email.setText(message);

        mailSender.send(email);
    }

    @Override
    public boolean updateUserProfile(Long userId, String userName, String firstName, String lastName) {
        Optional<User> optionalUser = userRepository.findById(userId);
        if (optionalUser.isPresent()) {
            User user = optionalUser.get();

            // 检查新用户名是否不同，且是否已被占用
            if (userName != null && !user.getUserName().equals(userName)) {
                Optional<User> existingUser = userRepository.findByUserName(userName);
                if (existingUser.isPresent()) {
                    throw new RuntimeException("This username is already taken.");
                }
                user.setUserName(userName);
            }

            if (firstName != null) {
                user.setFirstName(firstName);
            }

            if (lastName != null) {
                user.setLastName(lastName);
            }

            userRepository.save(user);
            return true;
        } else {
            throw new RuntimeException("User not found.");
        }
    }

    // 保留您现有的其他方法
}
