/**
 * @author Poe Ei Ei Phyu
 * Generated by script
 */

package com.shoppingcart.springboot.controller;

import com.shoppingcart.springboot.model.Review;

import com.shoppingcart.springboot.model.User;
import com.shoppingcart.springboot.service.*;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;

import org.springframework.web.bind.annotation.*;

import java.util.List;


import com.shoppingcart.springboot.model.Customer;
import com.shoppingcart.springboot.model.Product;
import com.shoppingcart.springboot.service.ReviewService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import jakarta.validation.Valid;

import java.util.List;


@RestController
@RequestMapping("/reviews")
@CrossOrigin(origins = "http://localhost:3000", allowCredentials = "true")
public class ReviewController {
    @Autowired
    private ReviewService reviewService;

    @Autowired
    private CustomerService customerService;

    @Autowired
    private ProductService productService;

    @Autowired
    private UserService userService;


    // Add a review
    @PostMapping("/add")
    public ResponseEntity<String> addReview(
            @RequestParam Long productId,
            @RequestParam Long userId,
            @RequestBody Review review) {
        User user = userService.getUserById(userId);
        Long customerId = user.getCustomer().getCustomerId();
        reviewService.addReview(productId, customerId, review);

        return ResponseEntity.status(HttpStatus.CREATED).body("Review added successfully");
    }

    // Delete a review
    @DeleteMapping("/delete/{reviewId}")
    public ResponseEntity<String> deleteReview(@PathVariable Long reviewId) {
        if (reviewService.getReview(reviewId) != null) {
            reviewService.deleteReview(reviewId);
            return ResponseEntity.ok("Review deleted successfully");
        }
        return ResponseEntity.status(HttpStatus.NOT_FOUND).body("Review not found");
    }

    // Update a review
    @PutMapping("/update/{reviewId}")
    public ResponseEntity<String> updateReview(@PathVariable Long reviewId, @RequestBody Review updatedReview) {
        if (reviewService.getReview(reviewId) != null) {
            reviewService.updateReview(reviewId, updatedReview);
            return ResponseEntity.ok("Review updated successfully");
        }
        return ResponseEntity.status(HttpStatus.NOT_FOUND).body("Review not found");
    }

    // Get a single review by ID
    @GetMapping("/{reviewId}")
    public ResponseEntity<Review> getReview(@PathVariable Long reviewId) {
        Review review = reviewService.getReview(reviewId);
        if (review != null) {
            return ResponseEntity.ok(review);
        }
        return ResponseEntity.status(HttpStatus.NOT_FOUND).build();
    }

    // Get all reviews
    @GetMapping("/all")
    public ResponseEntity<List<Review>> getAllReviews() {
        List<Review> reviews = reviewService.getAllReviews();
        return ResponseEntity.ok(reviews);
    }

    // Add a review
    @PostMapping("/products/{productId}")
    public ResponseEntity<Review> leaveReview(
            @PathVariable Long productId,
            @RequestParam Long customerId,
            @Valid @RequestBody Review review) {

        // Retrieve the product and customer entities
        Product product = productService.findProductById(productId);
        Customer customer = customerService.findCustomerById(customerId);

        // Set product and customer
        review.setProduct(product);
        review.setCustomer(customer);

        Review savedReview = reviewService.addReview(review);
        return ResponseEntity.ok(savedReview);
    }

    // Get reviews by product ID
    @GetMapping("/products/{productId}")
    public ResponseEntity<List<Review>> getReviewsByProductId(@PathVariable Long productId) {
        List<Review> reviews = reviewService.getReviewsByProductId(productId);
        return ResponseEntity.ok(reviews);
    }

    // Get reviews by customer ID
    @GetMapping("/customers/{customerId}")
    public ResponseEntity<List<Review>> getReviewsByCustomerId(@PathVariable Long customerId) {
        List<Review> reviews = reviewService.getReviewsByCustomerId(customerId);
        return ResponseEntity.ok(reviews);
    }

    // Get average rating of a product
    @GetMapping("/averageRating/{productId}")
    public double getAverageRating(@PathVariable Long productId) {
        return reviewService.calculateAverageRating(productId);
    }

}

