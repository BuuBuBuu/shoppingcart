/**
 * @author TANGYINGRUI
 * Generated by script
 */

package com.shoppingcart.springboot.controller;

import com.shoppingcart.springboot.model.Product;
import com.shoppingcart.springboot.service.ProductService;


import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.*;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;


@RestController
@CrossOrigin(origins = "http://localhost:3000")
@RequestMapping("/products")
public class ProductController {
    @Autowired
    private ProductService productService;

    // List products by page, based on defined sort type and order
    @GetMapping("/getProductsByPage")
    public ResponseEntity<Page<Product>> browseAllProducts(
            @RequestParam(defaultValue = "0") int page,
            @RequestParam(defaultValue = "20") int size,
            @RequestParam(defaultValue = "price") String sortBy,
            @RequestParam(defaultValue = "desc") String sortOrder) {

        Sort sort = sortOrder.equalsIgnoreCase("asc")
                ? Sort.by(sortBy).ascending()
                : Sort.by(sortBy).descending();

        Pageable pageable = PageRequest.of(page, size, sort);
        Page<Product> productPage = productService.getProductsByPage(pageable);

        return ResponseEntity.ok(productPage);
    }

    // Search products based on the searchContent key word and visibility
    @GetMapping("/searchProducts")
    public Page<Product> searchProducts(
            @RequestParam(defaultValue = "") String searchContent,
            @RequestParam(defaultValue = "0") int page,
            @RequestParam(defaultValue = "20") int size,
            @RequestParam(defaultValue = "desc") String sortOrder) {

        return productService.searchProducts(searchContent, page, size, sortOrder);
    }

    // Get product by productId
    @GetMapping("/getProductDetails/{productId}")
    public ResponseEntity<Product> getProductDetails(@PathVariable Long productId) {
        Product product = productService.findProductById(productId);
        if (product == null) {
            return ResponseEntity.status(HttpStatus.NOT_FOUND)
                    .body(null); // no product found, return 404
        }
        return ResponseEntity.ok(product); // return the product detail
    }

    // List products based on category
    @GetMapping("/searchByCategory/{category}")
    public ResponseEntity<List<Product>> searchByCategory(@PathVariable String category) {
        List<Product> products = productService.findProductsByCategory(category);
        if (products == null) {
            return ResponseEntity.status(HttpStatus.NOT_FOUND)
                    .body(null); // no product found, return 404
        }
        return ResponseEntity.ok(products); // return the products List detail
    }


    @PostMapping("/viewCountIncrement/{productId}")
    public ResponseEntity<Void> incrementViewCount(@PathVariable Long productId) {
        productService.incrementProductViewCount(productId);
        return ResponseEntity.ok().build();
    }

//    @Autowired
//    private ProductService productService;
//
////    @GetMapping("getProductsByPage")
////    public List<Product> browseAllProducts(
////            @RequestParam(defaultValue = "0") int page,
////            @RequestParam(defaultValue = "20") int size) {
////        return productService.getProductsByPage(page, size); // 分页实现
////    }
//
//    @GetMapping("/getProductsByPage")
//    public ResponseEntity<Page<Product>> browseAllProducts(
//            @RequestParam(defaultValue = "0") int page,
//            @RequestParam(defaultValue = "20") int size,
//            @RequestParam(defaultValue = "price") String sortBy,
//            @RequestParam(defaultValue = "desc") String sortOrder) {
//
////        Sort sort = sortOrder.equalsIgnoreCase("asc")
////                ? Sort.by(sortBy).ascending()
////                : Sort.by(sortBy).descending();
//
//        Sort sort = sortOrder.equalsIgnoreCase("asc")
//                ? Sort.by(sortBy).ascending()
//                : Sort.by(sortBy).descending();
//
//        Pageable pageable = PageRequest.of(page, size, sort);
//        Page<Product> productPage = productService.getProductsByPage(pageable);
//
//        return ResponseEntity.ok(productPage);
//    }
//
//
////    @GetMapping("/getProducts")
////    public List<Product> getAllProducts(
////            @RequestParam(defaultValue = "0") int page,
////            @RequestParam(defaultValue = "20") int size) {
////        return productService.getProductsByPage(page, size); // 分页实现
////    }
//
//    // 获取某一商品的具体信息
//    @GetMapping("/getProductDetails/{productId}")
//    public ResponseEntity<Product> getProductDetails(@PathVariable Long productId) {
//        Product product = productService.getProductById(productId);
//        if (product == null) {
//            return ResponseEntity.status(HttpStatus.NOT_FOUND)
//                    .body(null); // 商品未找到，返回404
//        }
//        return ResponseEntity.ok(product); // 返回商品的具体信息
//    }
//
//    // 根据商品分类获取搜索商品
//    @GetMapping("/searchByCategory/{category}")
//    public ResponseEntity<List<Product>> searchByCategory(@PathVariable String category) {
//        List<Product> products = productService.getProductsByCategory(category);
//        if (products == null) {
//            return ResponseEntity.status(HttpStatus.NOT_FOUND)
//                    .body(null); // 商品未找到，返回404
//        }
//        return ResponseEntity.ok(products); // 返回商品的具体信息
//    }
//
//    // 根据商品名称【获取搜索商品
//    @GetMapping("/searchByName/{name}")
//    public ResponseEntity<List<Product>> searchByName(@PathVariable String name) {
//        List<Product> products = productService.getProductsByName(name);
//        if (products == null) {
//            return ResponseEntity.status(HttpStatus.NOT_FOUND)
//                    .body(null); // 商品未找到，返回404
//        }
//        return ResponseEntity.ok(products); // 返回商品的具体信息
//    }

}