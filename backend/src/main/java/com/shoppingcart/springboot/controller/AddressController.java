/**
 * @author MAMINGYANG
 * Generated by script
 */

package com.shoppingcart.springboot.controller;

import com.shoppingcart.springboot.model.Address;
import com.shoppingcart.springboot.model.Customer;
import com.shoppingcart.springboot.service.AddressService;
import com.shoppingcart.springboot.service.CustomerService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import java.util.List;

@RestController
@RequestMapping("/addresses")
@CrossOrigin(origins = "http://localhost:3000",  allowCredentials = "true")
public class AddressController {

    @Autowired
    private AddressService addressService;

    @Autowired
    private CustomerService customerService; // 假设需要根据 userId 获取 customerId

    // 根据 userId 获取所有地址
    @GetMapping("/getAll")
    public ResponseEntity<List<Address>> getAllAddresses(@RequestParam Long userId) {
        try {
            // 根据 userId 获取 customerId
            Customer customer = customerService.findCustomerById(userId);
            if (customer == null) {
                return ResponseEntity.badRequest().body(null);
            }
            List<Address> addresses = addressService.getAddressesByCustomerId(customer.getCustomerId());
            return ResponseEntity.ok(addresses);
        } catch (RuntimeException ex) {
            return ResponseEntity.badRequest().body(null); // 返回 400 错误
        }
    }

    // 创建新地址
    @PostMapping("/create")
    public ResponseEntity<String> createAddress(@RequestParam Long userId, @RequestBody Address address) {
        try {
            // 根据 userId 获取 customerId
            Customer customer = customerService.findCustomerById(userId);
            if (customer == null) {
                return ResponseEntity.badRequest().body("Customer information not found.");
            }
            address.setCustomer(customer);
            addressService.saveAddress(address);
            return ResponseEntity.ok("Address created successfully.");
        } catch (RuntimeException ex) {
            return ResponseEntity.badRequest().body(ex.getMessage());
        }
    }

    // 删除地址
    @PostMapping("/delete")
    public ResponseEntity<String> deleteAddress(@RequestParam Long userId, @RequestParam Long addressId) {
        try {
            // 获取地址
            Address address = addressService.getAddressById(addressId);
            if (address == null) {
                return ResponseEntity.badRequest().body("Address to delete not found.");
            }
            // 检查地址是否属于该用户
            if (!address.getCustomer().getUser().getUserId().equals(userId)) {
                return ResponseEntity.badRequest().body("The address does not belong to the current user and cannot be deleted.");
            }
            addressService.deleteAddress(addressId);
            return ResponseEntity.ok("Address deleted successfully.");
        } catch (RuntimeException ex) {
            return ResponseEntity.badRequest().body(ex.getMessage());
        }
    }
}