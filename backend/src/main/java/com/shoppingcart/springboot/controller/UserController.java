/**
 * @author MAMINGYANG
 * Generated by script
 */

package com.shoppingcart.springboot.controller;

import com.shoppingcart.springboot.model.User;
import com.shoppingcart.springboot.service.UserService;
import jakarta.servlet.http.HttpSession;
import jakarta.validation.Valid;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import org.springframework.mail.SimpleMailMessage;
import org.springframework.mail.javamail.JavaMailSender;
import java.util.UUID;
import java.time.LocalDateTime;

@CrossOrigin(origins = "http://localhost:3000", allowCredentials = "true")
@RestController
@RequestMapping("/user")
public class UserController {

    @Autowired
    private UserService userService;

    @Autowired
    private JavaMailSender mailSender;

    // **注册新用户**
    @PostMapping("/register")
    public ResponseEntity<String> registerUser(@Valid @RequestBody User user) {
        try {
            boolean result = userService.registerUser(user);
            if (result) {
                return ResponseEntity.ok("Successful registration");
            } else {
                return ResponseEntity.badRequest().body("Registration failed");
            }
        } catch (RuntimeException ex) {
            return ResponseEntity.badRequest().body(ex.getMessage());
        }
    }

    // **更改用户密码**
    @PostMapping("/change-password")
    public ResponseEntity<String> changePassword(@RequestParam String email, @RequestParam String oldPassword,
                                                 @RequestParam String newPassword) {
        try {
            boolean result = userService.changePassword(email, oldPassword, newPassword);
            if (result) {
                return ResponseEntity.ok("Password changed successfully");
            }
            return ResponseEntity.badRequest().body("Password modification failed");
        } catch (RuntimeException ex) {
            return ResponseEntity.badRequest().body(ex.getMessage());
        }
    }

    // **用户登出**
    @PostMapping("/logout")
    public ResponseEntity<String> logoutUser(@RequestParam Long userId, HttpSession session) {
        try {
            userService.logout(userId);
            session.invalidate();
            return ResponseEntity.ok("User successfully logged out");
        } catch (RuntimeException ex) {
            return ResponseEntity.badRequest().body(ex.getMessage());
        }
    }

    // **根据用户ID获取用户信息**
    @GetMapping("/{userId}")
    public ResponseEntity<?> getUserById(@PathVariable Long userId) {
        try {
            User user = userService.getUserById(userId);
            return ResponseEntity.ok(user);
        } catch (RuntimeException ex) {
            return ResponseEntity.badRequest().body(ex.getMessage());
        }
    }

    // **处理忘记密码请求**
//    @PostMapping("/forgot_password")
//    public ResponseEntity<String> processForgotPassword(@RequestParam String email) {
//        User user = userService.getUserByEmail(email);
//        if (user == null) {
//            return ResponseEntity.status(HttpStatus.NOT_FOUND).body("用户未找到");
//        }
//
//        String token = UUID.randomUUID().toString();
//        userService.updateResetPasswordToken(token, user.getEmail());
//        // 发送邮件
//        sendResetPasswordEmail(user.getEmail(), token);
//
//        return ResponseEntity.ok("重置密码的邮件已发送");
//    }


    // *处理重置密码请求*
    @PostMapping("/reset_password")
    public ResponseEntity<String> processResetPassword(@RequestParam String email) {
        User user = userService.getUserByEmail(email);
        if (user == null) {
            return ResponseEntity.status(HttpStatus.NOT_FOUND).body("User not found");
        }

        // 调用 service 方法重置密码
        userService.resetPasswordToCurrentDateTime(user);

        return ResponseEntity.ok("A new password has been sent to your email");
    }

    // **处理重置密码请求**
//    @PostMapping("/reset_password")
//    public ResponseEntity<String> processResetPassword(@RequestParam String token, @RequestParam String newPassword) {
//        User user = userService.findByResetPasswordToken(token);
//        if (user == null || userService.isTokenExpired(user)) {
//            return ResponseEntity.status(HttpStatus.UNAUTHORIZED).body("无效或已过期的 token");
//        }
//
//        userService.updatePassword(user, newPassword);
//        return ResponseEntity.ok("密码已成功重置");
//    }

    // **用户登录（可选，根据需求）**
    @PostMapping("/login")
    public ResponseEntity<String> loginUser(@RequestParam String email, @RequestParam String password) {
        try {
            User user = userService.authenticate(email, password);
            // 登录成功的逻辑，例如创建会话或生成 JWT Token
            return ResponseEntity.ok("Login successful");
        } catch (RuntimeException ex) {
            return ResponseEntity.badRequest().body(ex.getMessage());
        }
    }

    @PostMapping("/update-profile")
    public ResponseEntity<String> updateUserProfile(
            @RequestParam Long userId,
            @RequestBody User userUpdates) {
        try {
            boolean result = userService.updateUserProfile(
                    userId,
                    userUpdates.getUserName(),
                    userUpdates.getFirstName(),
                    userUpdates.getLastName()
            );

            if (result) {
                return ResponseEntity.ok("User information updated successfully.");
            } else {
                return ResponseEntity.badRequest().body("Failed to update user information.");
            }
        } catch (RuntimeException ex) {
            return ResponseEntity.badRequest().body(ex.getMessage());
        }


    }
}
