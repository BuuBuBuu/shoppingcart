/**
 * @author Benjamin
 * Generated by script
 */

package com.shoppingcart.springboot.controller;

import com.shoppingcart.springboot.model.Product;
import com.shoppingcart.springboot.service.ProductService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.*;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.*;

import java.net.http.HttpRequest;

@Controller
@RequestMapping("/admin-ui")
public class ThymeleafAdminController {

    @Autowired
    private ProductService productService;

    // Display all products with multi-parameter search, pagination, and sorting
    @GetMapping("/products")
    public String getAllProducts(
            @RequestParam(value = "productId", required = false) Long productId,
            @RequestParam(value = "name", required = false) String name,
            @RequestParam(value = "category", required = false) String category,
            @RequestParam(value = "sortBy", defaultValue = "productId") String sortBy,
            @RequestParam(value = "order", defaultValue = "asc") String order,
            @RequestParam(value = "page", defaultValue = "0") int page,
            @RequestParam(value = "size", defaultValue = "10") String size,
            Model model) {

        Pageable pageable;
        if (size.equals("All")) {
            pageable = Pageable.unpaged();
        } else {
            pageable = PageRequest.of(page, Integer.parseInt(size), Sort.by(Sort.Direction.fromString(order), sortBy));
        }

        Page<Product> products = productService.searchAndFilterProducts(productId, name, category, sortBy, order, pageable);

        // Add search parameters to the model
        model.addAttribute("productIdParam", productId);
        model.addAttribute("nameParam", name);
        model.addAttribute("categoryParam", category);

        model.addAttribute("products", products.getContent());
        model.addAttribute("totalPages", products.getTotalPages());
        model.addAttribute("currentPage", page);
        model.addAttribute("size", size);
        model.addAttribute("sortBy", sortBy);
        model.addAttribute("sortOrder", order);  // Current order for UI to reflect the correct direction

        return "product-list";
    }

    // Render form for adding a new product
    @GetMapping("/products/new")
    public String createProductForm(Model model) {
        model.addAttribute("product", new Product());
        return "create-product";
    }

    // Handle form submission for adding a new product
    @PostMapping("/products")
    public String addProduct(@ModelAttribute Product product) {
        productService.saveProduct(product);
        return "redirect:/admin-ui/products";
    }

    // Render form to edit an existing product
    @GetMapping("/products/edit/{productId}")
    public String editProductForm(@PathVariable Long productId, Model model) {
        Product product = productService.findProductById(productId);
        model.addAttribute("product", product);
        return "edit-product";
    }

    // Handle form submission for updating an existing product
    @PostMapping("/products/{productId}")
    public String updateProduct(@PathVariable Long productId, @ModelAttribute Product product) {
        productService.updateProduct(productId, product);
        return "redirect:/admin-ui/products";
    }

    // Delete a product
    @GetMapping("/products/delete/{productId}")
    public String deleteProduct(@PathVariable Long productId) {
        productService.deleteProductById(productId);
        return "redirect:/admin-ui/products";
    }

    // Display login form
    @GetMapping("/login")
    public String showLoginPage() {
        return "admin-login";  // Ensure admin-login.html exists in templates folder
    }
}
