/**
 * @author TANGYINGRUI
 * Generated by script
 */

package com.shoppingcart.springboot.repository;

import com.shoppingcart.springboot.model.Product;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

import java.util.List;
import java.util.Optional;

@Repository
public interface ProductRepository extends JpaRepository<Product, Long> {

    // Find product by ID
    Optional<Object> findByProductId(Long productId);

    // Find products by name (case-insensitive)
    List<Product> findByNameContainingIgnoreCase(String name);

    // Find products by category
    List<Product> findByCategory(String category);

    // Find products by exact name
    List<Product> findByName(String name);

    // Pagination and search for visible products (by name, case-insensitive)
    Page<Product> findByNameContainingIgnoreCaseAndIsVisibleTrue(String name, Pageable pageable);

    // Pagination and search for visible products (by category, case-insensitive)
    Page<Product> findByCategoryContainingIgnoreCaseAndIsVisibleTrue(String category, Pageable pageable);

    // Find a visible product by ID
    Optional<Product> findByProductIdAndIsVisibleTrue(Long productId);

    // Find all visible products with pagination
    Page<Product> findByIsVisibleTrue(Pageable pageable);

    // New methods for sorting and searching
    List<Product> findByProductId(Long productId, Sort sort);

    // Search products based on the searchContent key word and visibility
    Page<Product> findByIsVisibleNotAndNameContainingIgnoreCase(Boolean isVisible, String searchContent, Pageable pageable);


    // Page<Product> findByNameContainingIgnoreCaseAndIsVisibleTrue(String name, Pageable pageable);

    Page<Product> findByProductId(Long productId, Pageable pageable);

    List<Product> findByNameContainingIgnoreCase(String name, Sort sort);

    Page<Product> findByNameContainingIgnoreCase(String name, Pageable pageable);

    Page<Product> findByNameContainingAndCategoryContainingIgnoreCase(String name, String category, Pageable pageable);

    Page<Product> findByCategoryContainingIgnoreCase(String category, Pageable pageable);

    List<Product> findByCategoryContainingIgnoreCase(String category);
}
